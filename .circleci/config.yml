# SPDX-FileCopyrightText: 2017-2020 City of Espoo
#
# SPDX-License-Identifier: LGPL-2.1-or-later

# NOTE: This configuration is not directly usable in forks as it contains
# Espoo-specific configurations, references to secrets and internal tooling.

version: 2.1

orbs:
  slack: circleci/slack@4.1.3
  owasp: entur/owasp@0.0.14

parameters:
  workspace_root:
    type: string
    default: /home/circleci/repo

aliases:
  - &workspace_evaka_base << pipeline.parameters.workspace_root >>/evaka-base
  - &workspace_apigw << pipeline.parameters.workspace_root >>/apigw
  - &workspace_frontend << pipeline.parameters.workspace_root >>/frontend
  - &workspace_proxy << pipeline.parameters.workspace_root >>/proxy
  - &workspace_service << pipeline.parameters.workspace_root >>/service
  - &workspace_message_service << pipeline.parameters.workspace_root >>/message-service
  - &workspace_compose << pipeline.parameters.workspace_root >>/compose

  # SSH key fingerprint for checking out other eVaka repositories
  - &ci_evaka_fingerprint 86:d0:b3:3d:aa:fc:d5:b9:6b:69:1e:c7:f5:56:66:aa

  # Version of remote Docker engine used with setup_remote_docker (not including machine executors)
  - &remote_docker_version "20.10.6"
  - &yarn_version '1.22.\*'
  - &shellcheck_image_version v0.7.2
  - &nodejs_image cimg/node:14.15
  - &openjdk_image cimg/openjdk:11.0
  - &ubuntu_machine_image ubuntu-2004:202104-01
  - &builder_aws_image 307238562370.dkr.ecr.eu-west-1.amazonaws.com/voltti/builder-aws:18.04-853d39120a28cf475e0c8aa5b25a5973e198b27a

  - &default_contexts
    context:
      - voltti-slack
      - voltti-dockerhub
  - &aws_contexts
    context:
      - voltti-slack
      - org-global

  - &default_config
    working_directory: << pipeline.parameters.workspace_root >>

  - &node_config
    <<: *default_config
    environment:
      # this makes Playwright download browsers to node_modules/playwright instead of $HOME/.cache/ms-playwright
      PLAYWRIGHT_BROWSERS_PATH: 0

  - &jvm_config
    <<: *default_config
    environment:
      GRADLE_OPTS: '-Dorg.gradle.daemon=false -Dorg.gradle.jvmargs="-Xmx2048m"'
      GRADLE_USER_HOME: << pipeline.parameters.workspace_root >>/.gradle-user-home
      JAVA_TOOL_OPTIONS: "-Xmx2048m"

  - &restore_repo
    restore_cache:
      keys:
        - repo-v1-{{ .Branch }}-{{ .Revision }}

  - &store_repo
    save_cache:
      key: repo-v1-{{ .Branch }}-{{ .Revision }}
      paths:
        - .

  - &restore_apigw_deps
    restore_cache:
      keys:
        - yarn-cache-apigw-v1-{{ checksum ".circleci/config.yml" }}-{{ checksum "apigw/yarn.lock" }}
        - yarn-cache-apigw-v1-
        - yarn-cache-apigw-

  - &store_apigw_deps
    save_cache:
      key: yarn-cache-apigw-v1-{{ checksum ".circleci/config.yml" }}-{{ checksum "apigw/yarn.lock" }}
      paths:
        - apigw/.yarn/cache

  - &restore_frontend_deps
    restore_cache:
      keys:
        - yarn-cache-frontend-v1-{{ checksum ".circleci/config.yml" }}-{{ checksum "frontend/yarn.lock" }}
        - yarn-cache-frontend-v1-
        - yarn-cache-frontend-

  - &store_frontend_deps
    save_cache:
      key: yarn-cache-frontend-v1-{{ checksum ".circleci/config.yml" }}-{{ checksum "frontend/yarn.lock" }}
      paths:
        - frontend/.yarn/cache
        - frontend/node_modules

  - &restore_service_gradle
    restore_cache:
      keys:
        - gradle-home-service-v4-{{ checksum ".circleci/config.yml" }}-{{ checksum "service/build.gradle.kts" }}-{{ checksum "service/gradle.properties" }}-{{ checksum "service/settings.gradle.kts" }}-{{ checksum "service/buildSrc/build.gradle.kts" }}-{{ checksum "service/buildSrc/src/main/kotlin/Version.kt" }}
        - gradle-home-service-v4-

  - &store_service_gradle
    save_cache:
      key: gradle-home-service-v4-{{ checksum ".circleci/config.yml" }}-{{ checksum "service/build.gradle.kts" }}-{{ checksum "service/gradle.properties" }}-{{ checksum "service/settings.gradle.kts" }}-{{ checksum "service/buildSrc/build.gradle.kts" }}-{{ checksum "service/buildSrc/src/main/kotlin/Version.kt" }}
      paths:
        # Actual Gradle files
        - service/buildSrc/.gradle
        - service/.gradle
        - service/custom-ktlint-rules/.gradle
        - .gradle-user-home/wrapper
        - .gradle-user-home/caches
        - .gradle-user-home/notifications
        # Build files
        - service/build
        - service/buildSrc/build
        - service/custom-ktlint-rules/build
        - service/vtjclient/build
        - service-lib/build

  - &restore_message_service_gradle
    restore_cache:
      keys:
        - gradle-home-message-service-v4-{{ checksum ".circleci/config.yml" }}-{{ checksum "message-service/build.gradle.kts" }}-{{ checksum "message-service/gradle.properties" }}-{{ checksum "message-service/settings.gradle.kts" }}
        - gradle-home-message-service-v4-

  - &store_message_service_gradle
    save_cache:
      key: gradle-home-message-service-v4-{{ checksum ".circleci/config.yml" }}-{{ checksum "message-service/build.gradle.kts" }}-{{ checksum "message-service/gradle.properties" }}-{{ checksum "message-service/settings.gradle.kts" }}
      paths:
        # Actual Gradle files
        - message-service/buildSrc/.gradle
        - message-service/.gradle
        - .gradle-user-home/wrapper
        - .gradle-user-home/caches
        - .gradle-user-home/notifications
        # Build files
        - message-service/build
        - message-service/buildSrc/build
        - message-service-lib/build

executors:
  aws_executor:
    <<: *default_config
    docker:
      - image: *builder_aws_image
  apigw_executor:
    <<: *node_config
    docker:
      - image: *nodejs_image
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
  frontend_executor:
    <<: *node_config
    docker:
      - image: *nodejs_image
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
  e2e_executor:
    <<: *node_config
    machine:
      image: *ubuntu_machine_image
      docker_layer_caching: true
      resource_class: large
  service_executor:
    <<: *jvm_config
    docker:
      - image: *openjdk_image
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
  service_test_executor:
    <<: *jvm_config
    machine:
      image: *ubuntu_machine_image
      resource_class: large
  shellcheck:
    parameters:
      shellcheck_image_version:
        type: string
        default: *shellcheck_image_version
    docker:
      - image: koalaman/shellcheck-alpine:<< parameters.shellcheck_image_version >>
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    working_directory: << pipeline.parameters.workspace_root >>

commands:
  attach_root_workspace:
    steps:
      - attach_workspace:
          at: << pipeline.parameters.workspace_root >>

  login_docker_hub:
    description: Log in to Docker Hub for authenticated pulls
    steps:
      - run: echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

  setup_authenticated_remote_docker:
    description: Setup remote Docker execution environment with Docker Hub authentication
    steps:
      - setup_remote_docker:
          version: *remote_docker_version
          docker_layer_caching: true
      - login_docker_hub

  build_frontend:
    steps:
      - run:
          name: yarn build
          working_directory: *workspace_frontend
          environment:
            SENTRY_NO_PROGRESS_BAR: "1"
          command: |
            if [ "$CIRCLE_BRANCH" = "master" ]; then
              export SENTRY_PUBLISH_ENABLED=true
            fi

            ICONS=pro yarn build
            ls -lRa ./dist/bundle

  build_maintenance_page:
    steps:
      - run:
          name: yarn build-maintenance-page
          working_directory: *workspace_frontend
          command: yarn build-maintenance-page

  build_storybook:
    steps:
      - run:
          name: yarn build-storybook
          working_directory: *workspace_frontend
          environment:
            SENTRY_NO_PROGRESS_BAR: "1"
          command: |
            ICONS=pro yarn build-storybook
            ls -lRa ./storybook-build

  e2e_test:
    parameters:
      suite:
        type: string
      yarn_version:
        type: string
        default: *yarn_version
      install_browsers:
        type: boolean
        default: true
    steps:
      - *restore_repo
      - attach_root_workspace
      - run:
          name: Load docker images
          command: |
            docker load -i apigw/image.tar
            docker load -i service/image.tar
      - login_docker_hub
      - run:
          name: Start up compose stack
          working_directory: *workspace_compose
          command: |
            docker-compose build
            CI=true LOCAL_DIR='../frontend' ./compose-e2e up -d
      - run:
          name: Install Node.js and yarn
          command: |
            export DEBIAN_FRONTEND=noninteractive
            nvm install
            node --version

            curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
            echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
            sudo apt-get update && sudo apt-get --yes install --no-install-recommends yarn=<< parameters.yarn_version >>
            yarn --version
      - when:
          condition: << parameters.install_browsers >>
          steps:
            - run:
                name: Install browsers
                command: |
                  curl --silent --show-error --location --fail --retry 3 --output /tmp/google-chrome-stable_current_amd64.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb \
                    && (sudo dpkg -i /tmp/google-chrome-stable_current_amd64.deb || sudo apt-get -fy install)  \
                    && rm -rf /tmp/google-chrome-stable_current_amd64.deb \
                    && sudo sed -i 's|HERE/chrome"|HERE/chrome" --disable-setuid-sandbox --no-sandbox|g' \
                        "/opt/google/chrome/google-chrome" \
                    && google-chrome --version
                  CHROME_VERSION="$(google-chrome --version)" \
                    && export CHROMEDRIVER_RELEASE="$(echo $CHROME_VERSION | sed 's/^Google Chrome //')" && export CHROMEDRIVER_RELEASE=${CHROMEDRIVER_RELEASE%%.*} \
                    && CHROMEDRIVER_VERSION=$(curl --silent --show-error --location --fail --retry 4 --retry-delay 5 http://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROMEDRIVER_RELEASE}) \
                    && curl --silent --show-error --location --fail --retry 4 --retry-delay 5 --output /tmp/chromedriver_linux64.zip "http://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_linux64.zip" \
                    && cd /tmp \
                    && unzip chromedriver_linux64.zip \
                    && rm -rf chromedriver_linux64.zip \
                    && sudo mv chromedriver /usr/local/bin/chromedriver \
                    && sudo chmod +x /usr/local/bin/chromedriver \
                    && chromedriver --version
      - when:
          condition:
            not: << parameters.install_browsers >>
          steps:
            - run:
                name: Install Playwright dependencies
                command: |
                  sudo apt-get update && sudo apt-get --yes install --no-install-recommends libgbm1
      - *restore_frontend_deps
      - run:
          name: Install frontend dependencies from Yarn cache
          working_directory: *workspace_frontend
          command: yarn install --immutable --immutable-cache
      - run:
          name: Run e2e tests against compose
          working_directory: *workspace_frontend
          command: |
            nvm use
            ./wait-for-dev-api.sh 'http://localhost:9999' || (cd << pipeline.parameters.workspace_root >>/compose && ./compose-e2e logs && false)
            yarn << parameters.suite >>
      - run:
          name: Collect docker-compose logs
          command: |
            cd << pipeline.parameters.workspace_root >>/compose
            ./compose-e2e logs --tail=all > /tmp/docker-compose-logs.txt
          when: always
      - store_artifacts:
          path: /tmp/docker-compose-logs.txt
          destination: docker-compose-logs.txt
      - store_artifacts:
          path: frontend/screenshots
          destination: screenshots
      - store_artifacts:
          path: frontend/videos
          destination: videos
      - store_test_results:
          path: frontend/test-results

  deploy_frontend:
    parameters:
      target_env:
        type: string
    steps:
      - attach_root_workspace
      - run:
          name: Configure AWS CLI
          command: replace-credentials
      - deploy_to_s3:
          target_env: << parameters.target_env >>
          from: frontend/dist/bundle/citizen-frontend
          to: citizen
      - deploy_to_s3:
          target_env: << parameters.target_env >>
          from: frontend/dist/bundle/employee-frontend
          to: employee
      - deploy_to_s3:
          target_env: << parameters.target_env >>
          from: frontend/dist/bundle/employee-mobile-frontend
          to: employee/mobile
      - deploy_to_s3:
          target_env: << parameters.target_env >>
          from: frontend/dist/maintenance-page
          to: maintenance-page
      - storybook_to_s3:
          target_env: << parameters.target_env >>

  deploy_to_s3:
    parameters:
      target_env:
        type: string
      from:
        type: string
      to:
        type: string
    steps:
      - run:
          name: Deploy (<< parameters.from >>)
          working_directory: << pipeline.parameters.workspace_root >>/<< parameters.from >>
          command: |
            aws s3 cp ./index.html s3://evaka-static-<< parameters.target_env >>/<< parameters.to >>/index.html \
              --acl public-read \
              --profile voltti-<< parameters.target_env >>

            if [ "<< parameters.target_env >>" = "prod" ]; then
              echo 'Target environment is prod, excluding source maps from deploy'
              EXTRA_ARGS=(
                '--exclude' '*.map'
              )
            fi

            aws s3 sync . s3://evaka-static-<< parameters.target_env >>/<< parameters.to >> \
              --acl public-read \
              --exact-timestamps \
              --exclude "*index.html" \
              "${EXTRA_ARGS[@]}" \
              --profile voltti-<< parameters.target_env >>

  storybook_to_s3:
    parameters:
      target_env:
        type: string
    steps:
      - run:
          name: Deploy Storybook
          working_directory: << pipeline.parameters.workspace_root >>/frontend
          command: |
            if [ "<< parameters.target_env >>" = "dev" ]; then
              aws --profile voltti-dev s3 cp storybook-build/ s3://evaka-static-dev/master/storybook/ --recursive --acl public-read
            fi

  load_base_image:
    steps:
      - run:
          name: Load base image
          working_directory: << pipeline.parameters.workspace_root >>
          command: docker load -i evaka-base.tar

  build_docker_image:
    parameters:
      image:
        type: string
      dir:
        type: string
      push_after:
        type: boolean
        default: false
    steps:
      - run:
          name: Build docker image
          working_directory: << parameters.dir >>
          command: |
            docker build \
              -t << parameters.image >> \
              --build-arg "build=${CIRCLE_BUILD_NUM}" \
              --build-arg "commit=${CIRCLE_SHA1}" \
              .
      - when:
          condition: << parameters.push_after >>
          steps:
            - run:
                name: Push docker image
                command: |
                  ecr-login
                  ecr-push << parameters.image >>
      - unless:
          condition: << parameters.push_after >>
          steps:
            - run:
                name: Save docker image
                working_directory: << parameters.dir >>
                command: docker save << parameters.image >> > image.tar

  push_docker_image:
    parameters:
      image:
        type: string
      dir:
        type: string
    steps:
      - run:
          name: Load docker image
          working_directory: << parameters.dir >>
          command: docker load -i image.tar
      - run:
          name: Push docker image
          command: |
            ecr-login
            ecr-push << parameters.image >>

  deploy_services:
    parameters:
      env:
        type: string
    steps:
      - add_ssh_keys:
          fingerprints:
            - *ci_evaka_fingerprint
      - attach_root_workspace
      - run:
          name: Deploy ECS services to << parameters.env >>
          command: |
            cd evaka-infra/terraform/evaka-ecs

            . replace-credentials

            terraform init
            terraform workspace select << parameters.env >>
            terraform apply -auto-approve -lock-timeout=300s \
              -var enduser-api-gw_version="${CIRCLE_SHA1}" \
              -var internal-api-gw_version="${CIRCLE_SHA1}" \
              -var evaka-srv_version="${CIRCLE_SHA1}" \
              -var message-srv_version="${CIRCLE_SHA1}" \
              -var proxy_version="${CIRCLE_SHA1}" \
              -var scheduled-api-calls_version="${CIRCLE_SHA1}" \
              -var ses-notification-processor_version="${CIRCLE_SHA1}"

  # Must be the last step in a job
  notify_slack:
    description: "Notify via Slack"
    steps:
      - slack/notify:
          branch_pattern: master
          channel: ci
          event: fail
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": { "type": "mrkdwn", "text": ":red_circle: Job *${CIRCLE_JOB}* has failed" },
                  "fields": [
                    { "type": "mrkdwn", "text": "*Project*:\n${CIRCLE_PROJECT_REPONAME}" },
                    { "type": "mrkdwn", "text": "*Commiter*:\n${CIRCLE_USERNAME}" }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [ { "type": "button", "text": { "type": "plain_text", "text": "View Job" }, "url": "${CIRCLE_BUILD_URL}" } ]
                }
              ]
            }

jobs:
  # MISC JOBS

  checkout_repo:
    executor: apigw_executor
    steps:
      - checkout
      - *store_repo
      - notify_slack

  fetch_private_dependencies:
    executor: aws_executor
    steps:
      - *restore_repo
      - run: replace-credentials
      - run:
          name: Fetch commercial frontend dependencies
          working_directory: *workspace_frontend
          command: |
            ./init-pro-icons.sh
      - persist_to_workspace:
          root: << pipeline.parameters.workspace_root >>
          paths:
            - frontend/vendor/fortawesome/*
      - notify_slack

  clone_infra_repo:
    executor: aws_executor
    steps:
      - add_ssh_keys:
          fingerprints:
            - *ci_evaka_fingerprint
      - attach_root_workspace
      - run: git clone git@github.com:espoon-voltti/evaka-infra.git
      - persist_to_workspace:
          root: << pipeline.parameters.workspace_root >>
          paths:
            - evaka-infra
      - notify_slack

  lint_scripts:
    executor: shellcheck
    steps:
      - *restore_repo
      - run:
          name: Install dependencies
          command: apk add curl jq git
      - run:
          name: Lint shell scripts
          command: |
            ./bin/run-shellcheck.sh
      - notify_slack

  # BUILD JOBS

  build_base_image:
    executor: apigw_executor
    steps:
      - *restore_repo
      - setup_authenticated_remote_docker
      - run:
          name: Build base image
          working_directory: << pipeline.parameters.workspace_root >>/evaka-base
          command: ./build.sh
      - run:
          name: Save base image
          working_directory: << pipeline.parameters.workspace_root >>
          command: docker save evaka-base > evaka-base.tar
      - persist_to_workspace:
          root: << pipeline.parameters.workspace_root >>
          paths:
            - evaka-base.tar
      - notify_slack

  apigw_build_and_test:
    executor: apigw_executor
    steps:
      - *restore_repo
      - *restore_apigw_deps
      - run:
          working_directory: *workspace_apigw
          command: yarn install --immutable
      - *store_apigw_deps
      - run:
          working_directory: *workspace_apigw
          command: yarn build
      - persist_to_workspace:
          root: << pipeline.parameters.workspace_root >>
          paths:
            - apigw/dist
      - run:
          working_directory: *workspace_apigw
          command: yarn lint
      - run:
          working_directory: *workspace_apigw
          command: yarn test-ci
      - store_test_results:
          path: << pipeline.parameters.workspace_root >>/apigw/build/test-reports
      - notify_slack

  apigw_build_image:
    executor: aws_executor
    steps:
      - *restore_repo
      - attach_root_workspace
      - setup_remote_docker:
          version: *remote_docker_version
          docker_layer_caching: true
      - load_base_image
      - build_docker_image:
          image: evaka/api-gateway
          dir: *workspace_apigw
      - persist_to_workspace:
          root: << pipeline.parameters.workspace_root >>
          paths:
            - apigw/image.tar
      - notify_slack

  apigw_push_image:
    executor: aws_executor
    steps:
      - attach_root_workspace
      - setup_remote_docker:
          version: *remote_docker_version
      - push_docker_image:
          image: evaka/api-gateway
          dir: *workspace_apigw
      - notify_slack

  frontend_build_and_test:
    executor: frontend_executor
    steps:
      - *restore_repo
      - attach_root_workspace
      - *restore_frontend_deps
      - run:
          working_directory: *workspace_frontend
          command: yarn install --immutable
      - run:
          name: Unpack commercial frontend dependencies
          working_directory: *workspace_frontend
          command: |
            ./unpack-pro-icons.sh
      - *store_frontend_deps
      - build_frontend
      - build_maintenance_page
      - build_storybook
      - persist_to_workspace:
          root: << pipeline.parameters.workspace_root >>
          paths:
            - frontend/dist
            - frontend/storybook-build
      - run:
          working_directory: *workspace_frontend
          command: yarn lint-strict
      - run:
          working_directory: *workspace_frontend
          command: yarn type-check
      - run:
          working_directory: *workspace_frontend
          command: yarn test --maxWorkers=2
      - store_test_results:
          path: << pipeline.parameters.workspace_root >>/frontend/test-results
      - notify_slack

  # E2E JOBS

  e2e-test-testcafe:
    parameters:
      suite:
        type: string
    executor: e2e_executor
    steps:
      - e2e_test:
          suite: e2e-ci-<< parameters.suite >>
      - notify_slack

  e2e-test-playwright:
    executor: e2e_executor
    steps:
      - e2e_test:
          suite: e2e-ci-playwright
          # Playwright doesn't need Chrome externally installed
          install_browsers: false
      - notify_slack

  # DEPLOY JOBS

  services_deploy:
    executor: aws_executor
    parameters:
      target_env:
        type: string
    steps:
      - deploy_services:
          env: << parameters.target_env >>
      - notify_slack

  frontend_deploy:
    executor: aws_executor
    parameters:
      target_env:
        type: string
    steps:
      - deploy_frontend:
          target_env: << parameters.target_env >>
      - notify_slack

  proxy_build_and_push_image:
    executor: aws_executor
    steps:
      - *restore_repo
      - setup_authenticated_remote_docker
      - run:
          name: Test proxy image configuration
          working_directory: *workspace_proxy
          command: |
            docker build \
              -t smoketest-evaka-proxy \
              -f smoketest.Dockerfile \
              --build-arg "build=${CIRCLE_BUILD_NUM}" \
              --build-arg "commit=${CIRCLE_SHA1}" \
              .
      - build_docker_image:
          image: evaka/proxy
          dir: *workspace_proxy
          push_after: true
      - notify_slack

  service_build:
    executor: service_executor
    steps:
      - *restore_repo
      - *restore_service_gradle
      - run:
          working_directory: *workspace_service
          command: ./gradlew assemble compileIntegrationTestKotlin
      - persist_to_workspace:
          root: << pipeline.parameters.workspace_root >>
          paths:
            - service/build/libs/
      - run:
          working_directory: *workspace_service
          command: |
            cd custom-ktlint-rules
            ./gradlew assemble
      - *store_service_gradle
      - run:
          working_directory: *workspace_service
          command: ./gradlew lintKotlin
      - run:
          working_directory: *workspace_service
          command: ./circle-check-migrations.sh
      - owasp/generate_cache_keys:
          cache_key: gradle-v1-cache-key
      - owasp/restore_owasp_cache:
          cache_key: gradle-v1-cache-key
      - run:
          name: Update OWASP Dependency-Check Database
          working_directory: *workspace_service
          command: ./gradlew dependencyCheckUpdate
      - owasp/store_owasp_cache:
          cve_data_directory: << pipeline.parameters.workspace_root >>/.gradle-user-home/dependency-check-data
          cache_key: gradle-v1-cache-key
      - run:
          name: Run OWASP Dependency-Check Analyzer
          working_directory: *workspace_service
          command: ./gradlew dependencyCheckAnalyze
      - store_artifacts:
          path: << pipeline.parameters.workspace_root >>/service/build/reports/
      - notify_slack

  service_build_image:
    executor: aws_executor
    steps:
      - *restore_repo
      - attach_root_workspace
      - setup_remote_docker:
          version: *remote_docker_version
          docker_layer_caching: true
      - run:
          name: Unzip executable
          working_directory: *workspace_service
          command: unzip -q build/libs/evaka-service-boot.jar -d target
      - load_base_image
      - build_docker_image:
          image: evaka/service
          dir: *workspace_service
      - persist_to_workspace:
          root: << pipeline.parameters.workspace_root >>
          paths:
            - service/image.tar
      - notify_slack

  service_test:
    executor: service_test_executor
    steps:
      - *restore_repo
      - *restore_service_gradle
      - run:
          name: gradle test
          working_directory: *workspace_service
          command: ./gradlew test
      - store_test_results:
          path: << pipeline.parameters.workspace_root >>/service/build/test-results/test/
      - store_test_results:
          path: << pipeline.parameters.workspace_root >>/service-lib/build/test-results/test/
      - store_artifacts:
          path: << pipeline.parameters.workspace_root >>/service/build/reports/
      - store_artifacts:
          path: << pipeline.parameters.workspace_root >>/service-lib/build/reports/
      - run:
          working_directory: *workspace_service
          name: gradle custom-ktlint-rules test
          command: |
            cd custom-ktlint-rules
            ./gradlew test
      - store_test_results:
          path: << pipeline.parameters.workspace_root >>/service/custom-ktlint-rules/build/test-results/test/
      - notify_slack

  service_integration_test:
    executor: service_test_executor
    parallelism: 4
    steps:
      - *restore_repo
      - *restore_service_gradle
      - login_docker_hub
      - run:
          name: gradle integrationTest
          working_directory: *workspace_service
          command: |
            # Get list of classnames of tests that should run on this node
            CLASSNAMES=$(circleci tests glob \
                "src/integrationTest/kotlin/**/*{Test,Tests}.kt" \
                "../service-lib/src/integrationTest/kotlin/**/*{Test,Tests}.kt" \
                | sed 's/.*src\/integrationTest\/kotlin\///' \
                | sed 's@/@.@g' \
                | sed 's/.kt//' \
                | circleci tests split --split-by=timings --timings-type=classname)
            # Format the arguments for Gradle
            GRADLE_ARGS=$(echo "$CLASSNAMES" | awk '{for (i=1; i<=NF; i++) print "--tests",$i}')
            echo "Prepared arguments for Gradle: $GRADLE_ARGS"
            ./gradlew integrationTest $GRADLE_ARGS
      - store_test_results:
          path: << pipeline.parameters.workspace_root >>/service/build/test-results/integrationTest/
      - store_artifacts:
          path: << pipeline.parameters.workspace_root >>/service/build/reports/
      - store_artifacts:
          path: << pipeline.parameters.workspace_root >>/service-lib/build/reports/
      - notify_slack

  service_push_image:
    executor: aws_executor
    steps:
      - *restore_repo
      - attach_root_workspace
      - setup_remote_docker:
          version: *remote_docker_version
      - push_docker_image:
          image: evaka/service
          dir: *workspace_service
      - notify_slack

  message_service_build:
    executor: service_executor
    steps:
      - *restore_repo
      - *restore_message_service_gradle
      - run:
          working_directory: *workspace_message_service
          command: ./gradlew assemble compileIntegrationTestKotlin
      - persist_to_workspace:
          root: << pipeline.parameters.workspace_root >>
          paths:
            - message-service/build/libs/
      - *store_message_service_gradle
      - run:
          working_directory: *workspace_message_service
          command: ./gradlew lintKotlin
      - owasp/generate_cache_keys:
          cache_key: gradle-v1-cache-key
      - owasp/restore_owasp_cache:
          cache_key: gradle-v1-cache-key
      - run:
          name: Update OWASP Dependency-Check Database
          working_directory: *workspace_message_service
          command: ./gradlew dependencyCheckUpdate
      - owasp/store_owasp_cache:
          cve_data_directory: << pipeline.parameters.workspace_root >>/.gradle-user-home/dependency-check-data
          cache_key: gradle-v1-cache-key
      - run:
          name: Run OWASP Dependency-Check Analyzer
          working_directory: *workspace_message_service
          command: ./gradlew dependencyCheckAnalyze
      - store_artifacts:
          path: << pipeline.parameters.workspace_root >>/message-service/build/reports/
      - notify_slack

  message_service_test:
    executor: service_test_executor
    steps:
      - *restore_repo
      - *restore_message_service_gradle
      - run:
          working_directory: *workspace_message_service
          command: ./gradlew test
      - store_test_results:
          path: << pipeline.parameters.workspace_root >>/message-service/build/test-results/test/
      - store_test_results:
          path: << pipeline.parameters.workspace_root >>/service-lib/build/test-results/test/
      - notify_slack

  message_service_integration_test:
    executor: service_test_executor
    steps:
      - *restore_repo
      - *restore_message_service_gradle
      - login_docker_hub
      - run:
          name: gradle integrationTest
          working_directory: *workspace_message_service
          command: ./gradlew integrationTest
      - store_test_results:
          path: << pipeline.parameters.workspace_root >>/message-service/build/test-results/integrationTest/
      - store_artifacts:
          path: << pipeline.parameters.workspace_root >>/message-service/build/reports/
      - store_artifacts:
          path: << pipeline.parameters.workspace_root >>/service-lib/build/reports/
      - notify_slack

  message_service_build_and_push_image:
    executor: aws_executor
    steps:
      - *restore_repo
      - attach_root_workspace
      - setup_remote_docker:
          version: *remote_docker_version
          docker_layer_caching: true
      - run:
          name: Unzip executable
          working_directory: *workspace_message_service
          command: unzip -q build/libs/evaka-message-service.jar -d target
      - load_base_image
      - build_docker_image:
          image: evaka/message-service
          dir: *workspace_message_service
          push_after: true
      - notify_slack

workflows:
  version: 2
  build_test_and_deploy:
    jobs:
      - checkout_repo:
          <<: *default_contexts
          filters:
            branches:
              # Forked pull requests have CIRCLE_BRANCH set to pull/XXX
              # Currently ALL jobs require secrets -> stop already at checkout for forks
              ignore: /pull\/[0-9]+/
      - fetch_private_dependencies:
          <<: *aws_contexts
          requires:
            - checkout_repo
      - lint_scripts:
          <<: *default_contexts
          requires:
            - checkout_repo
      - build_base_image:
          <<: *default_contexts
          requires:
            - checkout_repo

      - apigw_build_and_test:
          <<: *default_contexts
          requires:
            - checkout_repo
      - apigw_build_image:
          <<: *aws_contexts
          requires:
            - build_base_image
            - apigw_build_and_test
      - apigw_push_image:
          <<: *aws_contexts
          requires:
            - apigw_build_image

      - frontend_build_and_test:
          context:
            - voltti-slack
            - voltti-dockerhub
            - sentry-release
          requires:
            - fetch_private_dependencies

      - e2e-test-testcafe:
          <<: *default_contexts
          name: e2e-test-<< matrix.suite >>
          requires:
            - frontend_build_and_test
            - apigw_build_image
            - service_build_image
          matrix:
            parameters:
              suite:
                - citizen
                - invoicing
                - employee
                - employee-2
                - mobile
                - messaging
      - e2e-test-playwright:
          <<: *default_contexts
          requires:
            - frontend_build_and_test
            - apigw_build_image
            - service_build_image

      - proxy_build_and_push_image:
          context:
            - org-global
            - voltti-dockerhub
            - voltti-slack
          requires:
            - checkout_repo

      - service_build:
          <<: *default_contexts
          requires:
            - checkout_repo
      - service_build_image:
          <<: *aws_contexts
          requires:
            - build_base_image
            - service_build
      - service_test:
          <<: *default_contexts
          requires:
            - service_build
      - service_integration_test:
          <<: *default_contexts
          requires:
            - service_build
      - service_push_image:
          <<: *aws_contexts
          requires:
            - service_build_image
            - service_test
            - service_integration_test

      - message_service_build:
          <<: *default_contexts
          requires:
            - checkout_repo
      - message_service_test:
          <<: *default_contexts
          requires:
            - message_service_build
      - message_service_integration_test:
          <<: *default_contexts
          requires:
            - message_service_build
      - message_service_build_and_push_image:
          <<: *aws_contexts
          requires:
            - build_base_image
            - message_service_test
            - message_service_integration_test

      - clone_infra_repo:
          <<: *aws_contexts
          requires:
            - lint_scripts
            - e2e-test-citizen
            - e2e-test-invoicing
            - e2e-test-employee
            - e2e-test-employee-2
            - e2e-test-mobile
            - e2e-test-messaging
            - e2e-test-playwright
            - apigw_push_image
            - proxy_build_and_push_image
            - service_push_image
            - message_service_build_and_push_image
          filters:
            branches:
              only: master

      - services_deploy:
          <<: *aws_contexts
          name: services_deploy_<< matrix.target_env >>
          requires:
            - clone_infra_repo
          filters:
            branches:
              only: master
          matrix:
            parameters:
              target_env: [dev, test]

      - frontend_deploy:
          <<: *aws_contexts
          name: frontend_deploy_<< matrix.target_env >>
          requires:
            - clone_infra_repo
          filters:
            branches:
              only: master
          matrix:
            parameters:
              target_env: [dev, test]
      - frontend_approve_staging_deploy:
          type: approval
          requires:
            - services_deploy_test
            - frontend_deploy_test
          filters:
            branches:
              only: master
      - frontend_deploy:
          <<: *aws_contexts
          name: frontend_deploy_staging
          requires:
            - frontend_approve_staging_deploy
          filters:
            branches:
              only: master
          target_env: staging
      - frontend_approve_prod_deploy:
          type: approval
          requires:
            - frontend_deploy_staging
          filters:
            branches:
              only: master
      - frontend_deploy:
          <<: *aws_contexts
          name: frontend_deploy_prod
          requires:
            - frontend_approve_prod_deploy
          filters:
            branches:
              only: master
          target_env: prod
